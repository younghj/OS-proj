// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way(in=load,sel=address[3..5],
			a=lram0,
			b=lram1,
			c=lram2,
			d=lram3,
			e=lram4,
			f=lram5,
			g=lram6,
			h=lram7);
	RAM8(in=in,load=lram0,address=address[0..2],out=ram0);
	RAM8(in=in,load=lram1,address=address[0..2],out=ram1);
	RAM8(in=in,load=lram2,address=address[0..2],out=ram2);
	RAM8(in=in,load=lram3,address=address[0..2],out=ram3);
	RAM8(in=in,load=lram4,address=address[0..2],out=ram4);
	RAM8(in=in,load=lram5,address=address[0..2],out=ram5);
	RAM8(in=in,load=lram6,address=address[0..2],out=ram6);
	RAM8(in=in,load=lram7,address=address[0..2],out=ram7);
	
	Mux8Way16(
			a=ram0,
			b=ram1,
			c=ram2,
			d=ram3,
			e=ram4,
			f=ram5,
			g=ram6,
			h=ram7,
			sel=address[3..5],out=out);
}